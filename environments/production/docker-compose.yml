version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: adakings_postgres_prod
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - adakings_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: adakings_redis_prod
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - adakings_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django Application
  web:
    build:
      context: ../..
      dockerfile: environments/production/Dockerfile
    container_name: adakings_web_prod
    environment:
      - DJANGO_ENVIRONMENT=production
    env_file:
      - .env
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs:/app/logs
    networks:
      - adakings_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             gunicorn adakings_backend.wsgi:application 
             --config /app/environments/production/gunicorn.conf.py"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: adakings_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/var/www/adakings/static:ro
      - media_volume:/var/www/adakings/media:ro
      - ./ssl:/etc/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - adakings_network
    depends_on:
      - web
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backup Service (Optional)
  backup:
    image: postgres:15-alpine
    container_name: adakings_backup_prod
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST: postgres
    volumes:
      - ./backups:/backups
      - media_volume:/app/media:ro
    networks:
      - adakings_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    command: >
      sh -c "
      while true; do
        echo 'Creating database backup...'
        pg_dump -h postgres -U ${DB_USER} -d ${DB_NAME} > /backups/db_backup_$(date +%Y%m%d_%H%M%S).sql
        echo 'Backup completed'
        sleep 86400
      done
      "

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local

networks:
  adakings_network:
    driver: bridge
