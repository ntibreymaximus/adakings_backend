version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    container_name: adakings_prod_db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: adakings_prod_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Django Application
  web:
    build:
      context: ../../
      dockerfile: environments/production/Dockerfile
    container_name: adakings_prod_web
    ports:
      - "8000:8000"
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
      - logs_volume:/app/logs
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=adakings_backend.settings.production
      - DJANGO_ENVIRONMENT=production
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    command: >
      bash -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        gunicorn -c environments/production/gunicorn.conf.py adakings_backend.wsgi:application
      "

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: adakings_prod_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/var/www/adakings_backend/staticfiles
      - media_volume:/var/www/adakings_backend/mediafiles
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /etc/ssl/private:/etc/ssl/private:ro
    depends_on:
      - web
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backup Service (optional)
  backup:
    image: postgres:15
    container_name: adakings_backup
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./backup_script.sh:/backup_script.sh
    command: /bin/bash -c "chmod +x /backup_script.sh && /backup_script.sh"
    depends_on:
      db:
        condition: service_healthy
    restart: "no"
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  logs_volume:
    driver: local

networks:
  default:
    name: adakings_prod_network
