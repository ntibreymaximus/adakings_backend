version: '3.8'

services:
  # PostgreSQL Database (Development)
  postgres_dev:
    image: postgres:15-alpine
    container_name: adakings_postgres_dev
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./fixtures:/fixtures
      - ./backups:/backups
    networks:
      - adakings_dev_network
    restart: unless-stopped
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Development)
  redis_dev:
    image: redis:7-alpine
    container_name: adakings_redis_dev
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_dev_data:/data
    networks:
      - adakings_dev_network
    restart: unless-stopped
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django Application (Development)
  web_dev:
    build:
      context: ../..
      dockerfile: environments/dev/Dockerfile
    container_name: adakings_web_dev
    environment:
      - DJANGO_ENVIRONMENT=dev
      - DJANGO_DEBUG=True
    env_file:
      - .env
    volumes:
      - static_dev_volume:/app/staticfiles
      - media_dev_volume:/app/media
      - ./logs:/app/logs
      - ../../:/app:cached  # Mount source code for development
    networks:
      - adakings_dev_network
    depends_on:
      postgres_dev:
        condition: service_healthy
      redis_dev:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "8001:8000"  # Different port for development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             python manage.py loaddata fixtures/dev_data.json || true &&
             gunicorn adakings_backend.wsgi:application 
             --config /app/environments/dev/gunicorn.conf.py"

  # Nginx Reverse Proxy (Development)
  nginx_dev:
    image: nginx:alpine
    container_name: adakings_nginx_dev
    ports:
      - "8080:80"  # Different port for development
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - static_dev_volume:/var/www/adakings/dev/static:ro
      - media_dev_volume:/var/www/adakings/dev/media:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - adakings_dev_network
    depends_on:
      - web_dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MailHog (Development Email Testing)
  mailhog:
    image: mailhog/mailhog
    container_name: adakings_mailhog_dev
    ports:
      - "1025:1025"  # SMTP port
      - "8025:8025"  # Web UI port
    networks:
      - adakings_dev_network
    restart: unless-stopped

  # pgAdmin (Development Database Management)
  pgadmin:
    image: dpage/pgadmin4
    container_name: adakings_pgadmin_dev
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@adakings.local
      PGADMIN_DEFAULT_PASSWORD: dev_password
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - adakings_dev_network
    depends_on:
      - postgres_dev
    restart: unless-stopped

  # Redis Commander (Development Cache Management)
  redis_commander:
    image: rediscommander/redis-commander:latest
    container_name: adakings_redis_commander_dev
    environment:
      - REDIS_HOSTS=local:redis_dev:6379
    ports:
      - "8081:8081"
    networks:
      - adakings_dev_network
    depends_on:
      - redis_dev
    restart: unless-stopped

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  static_dev_volume:
    driver: local
  media_dev_volume:
    driver: local
  pgadmin_data:
    driver: local

networks:
  adakings_dev_network:
    driver: bridge
