# Generated by Django 5.2.2 on 2025-06-23 20:03

import django.db.models.deletion
from django.db import migrations, models


def convert_delivery_locations(apps, schema_editor):
    """Convert existing delivery location strings to ForeignKey references"""
    Order = apps.get_model('orders', 'Order')
    DeliveryLocation = apps.get_model('orders', 'DeliveryLocation')
    
    # Create a mapping of location names to DeliveryLocation objects
    location_mapping = {}
    for location in DeliveryLocation.objects.all():
        location_mapping[location.name] = location
    
    # Update all orders that have delivery locations
    for order in Order.objects.exclude(delivery_location_old__isnull=True).exclude(delivery_location_old=''):
        old_location_name = order.delivery_location_old
        
        # Try to find matching DeliveryLocation
        if old_location_name in location_mapping:
            order.delivery_location_new = location_mapping[old_location_name]
            order.save()
        else:
            # If no exact match, try to create a new DeliveryLocation
            # This handles the hardcoded DELIVERY_FEES locations
            fee_mapping = {
                "Adenta": "5.00",
                "Accra": "7.00", 
                "Madina": "4.00",
                "Legon": "3.00",
                "Accra Central": "10.00",
                "East Legon": "15.00",
                "Kasoa": "25.00",
                "Kumasi": "50.00",
                "Spintex": "12.00",
                "Tamale": "75.00",
                "Tema": "20.00",
            }
            
            if old_location_name in fee_mapping:
                # Create new DeliveryLocation if it doesn't exist
                location, created = DeliveryLocation.objects.get_or_create(
                    name=old_location_name,
                    defaults={'fee': fee_mapping[old_location_name], 'is_active': True}
                )
                order.delivery_location_new = location
                order.save()


def reverse_convert_delivery_locations(apps, schema_editor):
    """Reverse conversion - copy ForeignKey back to CharField"""
    Order = apps.get_model('orders', 'Order')
    
    for order in Order.objects.exclude(delivery_location_new__isnull=True):
        order.delivery_location_old = order.delivery_location_new.name
        order.save()


class Migration(migrations.Migration):

    dependencies = [
        ('orders', '0012_populate_delivery_locations'),
    ]

    operations = [
        # Step 1: Rename the old CharField
        migrations.RenameField(
            model_name='order',
            old_name='delivery_location',
            new_name='delivery_location_old',
        ),
        
        # Step 2: Add the new ForeignKey field
        migrations.AddField(
            model_name='order',
            name='delivery_location_new',
            field=models.ForeignKey(
                blank=True, 
                help_text='Select delivery location (Required for delivery orders).', 
                null=True, 
                on_delete=django.db.models.deletion.SET_NULL, 
                to='orders.deliverylocation'
            ),
        ),
        
        # Step 3: Convert the data
        migrations.RunPython(
            convert_delivery_locations,
            reverse_convert_delivery_locations,
        ),
        
        # Step 4: Remove the old CharField
        migrations.RemoveField(
            model_name='order',
            name='delivery_location_old',
        ),
        
        # Step 5: Rename the new ForeignKey to the original name
        migrations.RenameField(
            model_name='order',
            old_name='delivery_location_new',
            new_name='delivery_location',
        ),
    ]
